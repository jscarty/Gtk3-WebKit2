/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __WEBEXTENSIONIF_H__
#define __WEBEXTENSIONIF_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for at.atikon.WebExtensionIf */

#define TYPE_WEB_EXTENSION_IF (web_extension_if_get_type ())
#define WEB_EXTENSION_IF(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WEB_EXTENSION_IF, WebExtensionIf))
#define IS_WEB_EXTENSION_IF(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WEB_EXTENSION_IF))
#define WEB_EXTENSION_IF_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_WEB_EXTENSION_IF, WebExtensionIfIface))

struct _WebExtensionIf;
typedef struct _WebExtensionIf WebExtensionIf;
typedef struct _WebExtensionIfIface WebExtensionIfIface;

struct _WebExtensionIfIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_title) (
    WebExtensionIf *object,
    GDBusMethodInvocation *invocation);

};

GType web_extension_if_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *web_extension_if_interface_info (void);
guint web_extension_if_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void web_extension_if_complete_get_title (
    WebExtensionIf *object,
    GDBusMethodInvocation *invocation,
    const gchar *title);



/* D-Bus method calls: */
void web_extension_if_call_get_title (
    WebExtensionIf *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean web_extension_if_call_get_title_finish (
    WebExtensionIf *proxy,
    gchar **out_title,
    GAsyncResult *res,
    GError **error);

gboolean web_extension_if_call_get_title_sync (
    WebExtensionIf *proxy,
    gchar **out_title,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_WEB_EXTENSION_IF_PROXY (web_extension_if_proxy_get_type ())
#define WEB_EXTENSION_IF_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WEB_EXTENSION_IF_PROXY, WebExtensionIfProxy))
#define WEB_EXTENSION_IF_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WEB_EXTENSION_IF_PROXY, WebExtensionIfProxyClass))
#define WEB_EXTENSION_IF_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WEB_EXTENSION_IF_PROXY, WebExtensionIfProxyClass))
#define IS_WEB_EXTENSION_IF_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WEB_EXTENSION_IF_PROXY))
#define IS_WEB_EXTENSION_IF_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WEB_EXTENSION_IF_PROXY))

typedef struct _WebExtensionIfProxy WebExtensionIfProxy;
typedef struct _WebExtensionIfProxyClass WebExtensionIfProxyClass;
typedef struct _WebExtensionIfProxyPrivate WebExtensionIfProxyPrivate;

struct _WebExtensionIfProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  WebExtensionIfProxyPrivate *priv;
};

struct _WebExtensionIfProxyClass
{
  GDBusProxyClass parent_class;
};

GType web_extension_if_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WebExtensionIfProxy, g_object_unref)
#endif

void web_extension_if_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WebExtensionIf *web_extension_if_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
WebExtensionIf *web_extension_if_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void web_extension_if_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WebExtensionIf *web_extension_if_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
WebExtensionIf *web_extension_if_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_WEB_EXTENSION_IF_SKELETON (web_extension_if_skeleton_get_type ())
#define WEB_EXTENSION_IF_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WEB_EXTENSION_IF_SKELETON, WebExtensionIfSkeleton))
#define WEB_EXTENSION_IF_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WEB_EXTENSION_IF_SKELETON, WebExtensionIfSkeletonClass))
#define WEB_EXTENSION_IF_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WEB_EXTENSION_IF_SKELETON, WebExtensionIfSkeletonClass))
#define IS_WEB_EXTENSION_IF_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WEB_EXTENSION_IF_SKELETON))
#define IS_WEB_EXTENSION_IF_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WEB_EXTENSION_IF_SKELETON))

typedef struct _WebExtensionIfSkeleton WebExtensionIfSkeleton;
typedef struct _WebExtensionIfSkeletonClass WebExtensionIfSkeletonClass;
typedef struct _WebExtensionIfSkeletonPrivate WebExtensionIfSkeletonPrivate;

struct _WebExtensionIfSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WebExtensionIfSkeletonPrivate *priv;
};

struct _WebExtensionIfSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType web_extension_if_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WebExtensionIfSkeleton, g_object_unref)
#endif

WebExtensionIf *web_extension_if_skeleton_new (void);


G_END_DECLS

#endif /* __WEBEXTENSIONIF_H__ */
